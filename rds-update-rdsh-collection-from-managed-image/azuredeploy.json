{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
  "parameters": {
    "existingRdshCollectionName": {
      "type": "string",
      "defaultValue": "Desktop Collection",
      "metadata": {
        "description": "Name of the RDSH collection to update"
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage account for diagnostic extension"
      }
    },
    "rdshUpdateIteration": {
      "type": "string",
      "metadata": {
        "description": "A unique designator representing update iteration; newly created RDSH instances will have their names in the form: 'rdsh-&lt;index&gt;&lt;iteration&gt;"
      }
    },
    "rdshNumberOfInstances": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of RD Session Hosts"
      }
    },
    "rdshVmSize": {
      "type": "string",
      "metadata": {
        "description": "The size of the RDSH virtual machines"
      },
      "defaultValue": "Standard_D1_v2"
    },
    "userLogoffTimeoutInMinutes": {
      "type": "int",
      "defaultValue": 60,
      "metadata": {
        "description": "Timeout before forced user logoff from old RDSH instances"
      }
    },
    "existingDomainName": {
      "type": "string",
      "metadata": {
        "description": "Domain name of the exisiting RDS deployment"
      }
    },
    "existingAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "The name of administrator in the existing RDS deployment"
      }
    },
    "existingAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Domain administrator password"
      }
    },
    "existingVnetName": {
      "type": "string",
      "defaultValue": "rdsvnet",
      "metadata": {
        "description": "VNET name"
      }
    },
    "existingSubnetName": {
      "type": "string",
      "defaultValue": "adSubnet",
      "metadata": {
        "description": "Subnet name"
      }
    },
    "availabilitySet": {
      "type": "string",
      "defaultValue": "rdsh-availabilityset",
      "metadata": {
        "description": "Availability set for new RDSH instances"
      }
    },
    "connectionBrokerVMName": {
      "type": "string",
      "defaultValue": "cb-vm",
      "metadata": {
        "description": "VM name of the connection broker"
      }
    },
    "rdshManagedImageId": {
      "type": "string",
      "metadata": {
        "description": "Id of the managed Image to create the session host from. Example: /subscriptions/553d5db8-21e7-46cc-9a82-99c45a9f8183/resourceGroups/emards/providers/Microsoft.Compute/images/rdsh-image-managed-04092018"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "https://rdsa46tnvus4gyrmm.blob.core.windows.net/sacarmtemplate"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    }

  },

  "variables": {
    "iteration": "[toLower(parameters('rdshUpdateIteration'))]",
    "rdshManagedImageName": "[split(parameters('rdshManagedImageId'),'/' )[8]]",
    "impersonateScript": "https://rdsa46tnvus4gyrmm.blob.core.windows.net/sacarmtemplate/New-ImpersonateUser.ps1",
    "p": {
      "domain": "[concat(' -domain ', parameters('existingDomainName'))]",
      "user": "[concat(' -username ', parameters('existingAdminUsername'))]",
      "pwd": "[concat(' -password ', parameters('existingAdminPassword'))]",
      "collection": "[concat(' -collection \"', parameters('existingRdshCollectionName'), '\"')]",
      "iteration": "[concat(' -iteration ', toLower(parameters('rdshUpdateIteration')))]",
      "servers": "[concat(' -nServers ', parameters('rdshNumberOfInstances'))]",
      "timeout": "[concat(' -nTimeoutMinutes ', parameters('userLogoffTimeoutInMinutes'))]"
    },
    "scriptParameters": "[concat(variables('p').domain, variables('p').user, variables('p').pwd, variables('p').collection, variables('p').iteration, variables('p').servers, variables('p').timeout)]",
    "scriptFolder": "Scripts",
    "scriptFileName": "Script.ps1"
  },

  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('rdsh-', copyindex(),variables('iteration'), '-nic')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "rdsh-nic-loop",
        "count": "[parameters('rdshNumberOfInstances')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('existingVnetName'), parameters('existingSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[parameters('availabilitySet')]",
      "location": "[resourceGroup().location]"
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/images",
      "name": "[variables('rdshManagedImageName')]",
      "location": "[resourceGroup().location]"
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('rdsh-', copyindex(),variables('iteration'))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "rdsh-vm-loop",
        "count": "[parameters('rdshNumberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', 'rdsh-', copyindex(),variables('iteration'), '-nic')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('rdshVmSize')]"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySet'))]"
        },
        "osProfile": {
          "computerName": "[concat('rdsh-', copyindex(),variables('iteration'))]",
          "adminUsername": "[parameters('existingAdminUsername')]",
          "adminPassword": "[parameters('existingAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[parameters('rdshManagedImageId')]"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('rdsh-', copyindex(),variables('iteration'), '-nic'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2016-01-01').primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "apiVersion": "2015-06-15",
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "name": "[concat('rdsh-',copyindex(),variables('iteration'),'/sessionhost')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat('rdsh-', copyindex(),variables('iteration')))]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.11",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "modulesUrl": "[concat(parameters('_artifactsLocation'),'/DSC/Configuration.zip', parameters('_artifactsLocationSasToken'))]",
              "configurationFunction": "Configuration.ps1\\SessionHost",
              "Properties": {
                "DomainName": "[parameters('existingDomainName')]",
                "AdminCreds": {
                  "UserName": "[parameters('existingAdminUsername')]",
                  "Password": "PrivateSettingsRef:AdminPassword"
                }
              }
            },
            "protectedSettings": {
              "Items": {
                "AdminPassword": "[parameters('existingAdminPassword')]"
              }
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('connectionBrokerVMName'),'/customscript')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "rdsh-vm-loop"
      ],
      "tags": {
        "displayName": "script"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.9",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('impersonateScript')]",
            "[concat(parameters('_artifactsLocation'), '/', variables('scriptFileName'), parameters('_artifactsLocationSasToken'))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat( 'powershell -noninteractive -executionpolicy bypass -file ', variables('scriptFileName'), variables('scriptParameters'), ' >> script.log 2>&1' )]"
        }
      }
    }
  ]
}
